import { expect } from "chai";
import { ethers } from "hardhat";

const credentialId = "aTkxBZxpAv72wfO9WwpM6A";
const pubX =
  83119486062970621463723234150239147689579444150733362847674676168668972156964n;
const pubY =
  32209800820871644040775392329701456672571879045350053501208212991944405823015n;

describe("PasskeyAccount", function () {
  it("isValidSignature", async function () {
    const [signer] = await ethers.getSigners();

    const account = await (
      await ethers.getContractFactory("PasskeyAccount")
    ).deploy();

    await account.setPubKey(credentialId, pubX, pubY);
    expect(await account.pubKey()).to.deep.equal([credentialId, pubX, pubY]);

    expect(
      await account.isValidSignature(
        "0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8",
        "0x0ae9c63bfeb5ffc876a3fb78c57249590958117a9b1229a0d3c71a57006225d52655892656382d829dc5157864412ef2862d00d32705a423d70b51caede27fab00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000247b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c73657d000000000000000000"
      )
    ).to.be.equal("0x1626ba7e");
  });

  it("exec", async function () {
    const [metaSigner] = await ethers.getSigners();
    const receiverAddress = "0x70997970C51812dc3A010C7d01b50e0d17dc79C8";

    const PasskeyAccount = await ethers.getContractFactory("PasskeyAccount");
    const account = await PasskeyAccount.deploy();

    await account.setPubKey(credentialId, pubX, pubY);
    expect(await account.pubKey()).to.deep.equal([credentialId, pubX, pubY]);

    await metaSigner.sendTransaction({
      to: await account.getAddress(),
      value: ethers.parseEther("1"),
    });
    expect(
      await ethers.provider.getBalance(await account.getAddress())
    ).to.be.equal(ethers.parseEther("1"));

    await account.exec(
      {
        target: receiverAddress,
        value: ethers.parseEther("0.1"),
        data: "0x",
      },
      "0x571eeb10645cfe7933fe22e4a4fe6a971179e9bc8c8b3ee022f35e2a4fbdd07b325adff92ac36e2e41f464281a0c1a22f70def705accaaa3aae52b09cbf5439100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000247b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037222c226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c73657d000000000000000000"
    );
    expect(
      await ethers.provider.getBalance(await account.getAddress())
    ).to.be.equal(ethers.parseEther("0.9"));
  });
});
